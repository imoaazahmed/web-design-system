name: build-docker-image
on:
  push:
    paths:
      - 'packages/*/src/**'
      - 'yarn.lock'
      - 'Dockerfile'
      - '.storybook/*'
      - 'mini.Dockerfile'
      - '.github/**'
    branches:
      - '!*'
      - 'develop'
      - 'testing'
      - 'master'

env:
  GH_PAT: ${{ secrets.GH_PAT }}
  DOCKER_PAT: ${{ secrets.DOCKER_PAT }}
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  CI: true
  JENKINS_DEV_JOB_URL: ${{ secrets.JENKINS_DEV_JOB_URL }}
  JENKINS_STAGE_JOB_URL: ${{ secrets.JENKINS_STAGE_JOB_URL }}
  JENKINS_TOKEN_DEVELOP: ${{ secrets.JENKINS_TOKEN_DEVELOP }}
  JENKINS_TOKEN_TEST: ${{ secrets.JENKINS_TOKEN_TEST }}
  JENKINS_TOKEN_STAGE: ${{ secrets.JENKINS_TOKEN_STAGE }}

jobs:
  build:
    runs-on: ubuntu-18.04
    timeout-minutes: 20

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 30
          persist-credentials: false

      - name: Get yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache node modules
        uses: actions/cache@v1
        id: cache
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: General
        run: |
          # comment
          BRANCH_NAME=${GITHUB_REF##*/}
          REPOSITORY_NAME=$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}')
          JENKINS_TOKEN_NAME=$(echo "JENKINS_TOKEN_${BRANCH_NAME^^}")
          JENKINS_TOKEN_VALUE=${!JENKINS_TOKEN_NAME}
          echo "REPOSITORY_NAME=$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}')" >> $GITHUB_ENV
          echo "BRANCH_NAME=$(echo "${BRANCH_NAME}")" >> $GITHUB_ENV
          COMMIT_DATE=$(git log -n 1 --pretty='format:%cd' --date=format:'%y-%m-%d')
          echo "COMMIT_DATE=$(echo "${COMMIT_DATE}")" >> $GITHUB_ENV
          GH_SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-7)
          echo "GH_SHA_SHORT=$(echo "${GH_SHA_SHORT}")" >> $GITHUB_ENV
          DOCKER_IMAGE_TAG=$BRANCH_NAME-$COMMIT_DATE-$GH_SHA_SHORT
          echo "DOCKER_IMAGE_TAG=$(echo "${DOCKER_IMAGE_TAG}")" >> $GITHUB_ENV
          echo "JENKINS_TOKEN_NAME=$(echo "${JENKINS_TOKEN_NAME}")" >> $GITHUB_ENV
          echo "JENKINS_TOKEN_VALUE=$(echo "${JENKINS_TOKEN_VALUE}")" >> $GITHUB_ENV
          JENKINS_TOKEN=$REPOSITORY_NAME-$JENKINS_TOKEN_VALUE
          echo "JENKINS_TOKEN=$(echo "${JENKINS_TOKEN}")" >> $GITHUB_ENV
          git config --global url."https://${{ secrets.GH_PAT }}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
          git config --global url."https://${{ secrets.GH_PAT }}:x-oauth-basic@github.com/".insteadOf "ssh://git@github.com/"
          JENKINS_WEBHOOK_URL="https://jenkins.tradelingops.com/generic-webhook-trigger/invoke?token=$JENKINS_TOKEN&docker_image_tag=$DOCKER_IMAGE_TAG"
          echo "JENKINS_WEBHOOK_URL=$(echo "${JENKINS_WEBHOOK_URL}")" >> $GITHUB_ENV

      - name: Login to DockerHub Package Repository
        run: |
          docker login --username bottradeling -p ${DOCKER_PAT}

      - name: Install Dependencies if no cache
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          yarn || ( yarn cache clean --force && yarn )

      # https://github.com/actions/cache/issues/16
      - name: Test
        run: |
          # Istall dev deps if jest not found
          [ -f "node_modules/.bin/jest" ] || yarn
          yarn test
        timeout-minutes: 8

      - name: Lint
        run: yarn lint
        timeout-minutes: 3

      - name: Build
        run: |
          yarn build
          yarn build-storybook

      - name: Build the Docker image
        run: |
          docker build . --file mini.Dockerfile -t app:latest \
          --build-arg GH_PAT=${GH_PAT} \
          --build-arg BUILD_NR=$GIT_BRANCH-$GH_SHA_SHORT \
          --build-arg BUILD_BRANCH=$GIT_BRANCH \
          --build-arg BUILD_COMMIT=$GH_SHA_SHORT \
          --build-arg BUILD_DATE=`date +%Y-%m-%d:%H:%M:%S`
        timeout-minutes: 15

      - name: Tag Docker Image :latest-brachName
        run: |
          # we push latest separate so it shows up as latest in the UI
          docker tag app:latest tradeling/$REPOSITORY_NAME:latest-$BRANCH_NAME
          docker push tradeling/$REPOSITORY_NAME:latest-$BRANCH_NAME
      - name: Tag branch with branchName-commitDate
        run: |
          docker tag app:latest tradeling/$REPOSITORY_NAME:$DOCKER_IMAGE_TAG
          docker push tradeling/$REPOSITORY_NAME:$DOCKER_IMAGE_TAG

      - name: Deploy if not master
        if: github.ref != 'refs/heads/master'
        run: |
          curl  -o --output /dev/null $JENKINS_WEBHOOK_URL

      - uses: 8398a7/action-slack@v2
        with:
          status: ${{ job.status }}
          author_name: ${{ github.repository }} Build Docker
          # mention: "UP32QM0F2"
          only_mention_fail: 'UP32QM0F2'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
